name: "fintech-network"
x-type: "hlfv1"
x-loggingLevel: error
description: "The network to be in"
version: 1.0.0

client:

  # Which organization does this application instance belong to? The value must be the name of an org
  # defined under "organizations"
  organization: Org1

  logging:
    level: error

  # Global configuration for peer, event service and orderer timeouts
  peer:
    timeout:
      connection: 10s
      discovery:
        greylistExpiry: 5s
  eventService:
    type: eventhub
    timeout:
      connection: 10s
      registrationResponse: 10s
  orderer:
    timeout:
      connection: 10s
      response: 10s
  global:
    timeout:
      query: 45s
      execute: 60s
    cache:
      connectionIdle: 30s
      eventServiceIdle: 500ms


  # Root of the MSP directories with keys and certs.
  cryptoconfig:
    # path: c:/Users/stergiou/go/src/name/stergiou/myquery/android/app/src/main/assets/crypto-config
    # CAN BE RELATIVE,
    path: crypto-config

  # Some SDKs support pluggable KV stores, the properties under "credentialStore"
  # are implementation specific
  credentialStore:
    # CAN BE RELATIVE, otherwise use absolute ${GOPATH}/src/crypto-store/admin2/msp/signcerts
    # path: crypto-store/{USERNAME}/msp/signcerts
    #path: crypto-store/testfi1/msp/signcerts
    path: crypto-store/{USERNAME}/msp/signcerts

    cryptoStore:
      # CAN BE RELATIVE, otherwise use absolute ${GOPATH}/src/crypto-store/admin2/msp
      #path: crypto-store/{USERNAME}/msp
      #path: crypto-store/testfi1/msp
      path: crypto-store/{USERNAME}/msp

    # [Optional]. Specific to Composer environment. Not used by SDK Go.
    #wallet: wallet-name

    # BCCSP config for the client. Used by GO SDK.
  BCCSP:
    security:
      enabled: true
      default:
        provider: "SW"
      hashAlgorithm: "SHA2"
      softVerify: true
      ephemeral: false
      level: 256

  tlsCerts:
    # [Optional]. Use system certificate pool when connecting to peers, orderers (for negotiating TLS) Default: false
    systemCertPool: false

    # [Optional]. Client key and cert for TLS handshake with peers and orderers
    client:
      key:
        path: c:/Dropbox/devel/go/src/blockchain_at_fintech/fi/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/tls/client.key
      cert:
        path:  c:/Dropbox/devel/go/src/blockchain_at_fintech/fi/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/tls/client.crt

#
# [Optional]. But most apps would have this section so that channel objects can be constructed
# based on the content below. If an app is creating channels, then it likely will not need this
# section.
#
channels:
  # name of the channel
  channel1:
    # Required. list of orderers designated by the application to use for transactions on this
    # channel. This list can be a result of access control ("org1" can only access "ordererA"), or
    # operational decisions to share loads from applications among the orderers.  The values must
    # be "names" of orgs defined under "organizations/peers"
    orderers:
    - orderer.example.com

    # Required. list of peers from participating orgs
    peers:
      peer1.org1.example.com:
        # [Optional]. will this peer be sent transaction proposals for endorsement? The peer must
        # have the chaincode installed. The app can also use this property to decide which peers
        # to send the chaincode install request. Default: true
        endorsingPeer: true

        # [Optional]. will this peer be sent query proposals? The peer must have the chaincode
        # installed. The app can also use this property to decide which peers to send the
        # chaincode install request. Default: true
        chaincodeQuery: true

        # [Optional]. will this peer be sent query proposals that do not require chaincodes, like
        # queryBlock(), queryTransaction(), etc. Default: true
        ledgerQuery: true

        # [Optional]. will this peer be the target of the SDK's listener registration? All peers can
        # produce events but the app typically only needs to connect to one to listen to events.
        # Default: true
        eventSource: true

    # [Optional]. what chaincodes are expected to exist on this channel? The application can use
    # this information to validate that the target peers are in the expected state by comparing
    # this list with the query results of getInstalledChaincodes() and getInstantiatedChaincodes()
    chaincodes:
    # the format follows the "canonical name" of chaincodes by fabric code
    - cc:1.0
    - qscc

#
# list of participating organizations in this network
#
organizations:
  Org1:
    mspid: Org1MSP

    # This org's MSP store (absolute path or relative to client.cryptoconfig)
    cryptoPath:  peerOrganizations/org1.example.com/users/{USERNAME}@org1.example.com/msp

    peers:
    - peer1.org1.example.com

    # [Optional]. Certificate Authorities issue certificates for identification purposes in a Fabric based
    # network. Typically certificates provisioning is done in a separate process outside of the
    # runtime network. Fabric-CA is a special certificate authority that provides a REST APIs for
    # dynamic certificate management (enroll, revoke, re-enroll). The following section is only for
    # Fabric-CA servers.
    certificateAuthorities:
    - ca.org1.example.com

    # [Optional]. If the application is going to make requests that are reserved to organization
    # administrators, including creating/updating channels, installing/instantiating chaincodes, it
    # must have access to the admin identity represented by the private key and signing certificate.
    # Both properties can be the PEM string or local path to the PEM file. Note that this is mainly for
    # convenience in development mode, production systems should not expose sensitive information
    # this way. The SDK should allow applications to set the org admin identity via APIs, and only use
    # this route as an alternative when it exists.
    adminPrivateKey:
      pem: "-----BEGIN PRIVATE KEY----- <etc>"
    signedCert:
      path: "/tmp/somepath/signed-cert.pem"
#    adminPrivateKey:
#      path: crypto-store/admin/msp/keystore/admin@Org1MSP-cert.pem
#    signedCert:
#      path: crypto-store/admin/msp/signcerts/Admin@Org1MSP-cert.pem

  # Orderer Org name
  ordererorg:
    # Membership Service Provider ID for this organization
    mspID: "OrdererOrg"

    # Needed to load users crypto keys and certs for this org (absolute path or relative to global cryptopath, DEV mode)
    cryptoPath: ordererOrganizations/example.com/users/{USERNAME}@example.com/msp

#
# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.
#
orderers:
  local.orderer.example.com:
    # url: {ORDERER_URL}
    url: 192.168.99.100:31010

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    #TODO to be moved to high level, common for all grpc connections
    grpcOptions:
      ssl-target-name-override: orderer.example.com
      grpc-max-send-message-length: 15
      #     These parameters should be set in coordination with the keepalive policy on the server,
      #     as incompatible settings can result in closing of connection.
      #     When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      #will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      # Certificate location ABSOLUTE path
      path:  c:/Dropbox/devel/go/src/blockchain_at_fintech/fi/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem

#
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:
  local.peer1.org1.example.com:
    # this URL is used to send endorsement and query requests
    #url: {PEER_URL}
    url: 192.168.99.100:30110

    # this URL is used to connect the EventHub and registering event listeners
    #eventUrl: {EVENT_URL}
    eventUrl: 192.168.99.100:30111

    #TODO to be moved to high level, common for all grpc connections
    grpcOptions:
      ssl-target-name-override: peer1.org1.example.com
      grpc.http2.keepalive_time: 15
      #     These parameters should be set in coordination with the keepalive policy on the server,
      #     as incompatible settings can result in closing of connection.
      #     When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      #will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      # Certificate location ABSOLUTE path
      path:  c:/Dropbox/devel/go/src/blockchain_at_fintech/fi/crypto-config/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem

#
# Fabric-CA is a special kind of Certificate Authority provided by Hyperledger Fabric which allows
# certificate management to be done via REST APIs. Application may choose to use a standard
# Certificate Authority instead of Fabric-CA, in which case this section would not be specified.
#
certificateAuthorities:
  local.ca.org1.example.com:
    url: http://ca.org1.example.com:7054
    # the properties specified under this object are passed to the 'http' client verbatim when
    # making the request to the Fabric-CA server
    httpOptions:
      verify: true
    tlsCACerts:
      # Comma-Separated list of paths
      #path: ${GOPATH}/src/github.com/hyperledger/fabric-sdk-go/test/fixtures/fabricca/tls/certs/ca_root.pem
      path:  c:/Dropbox/devel/go/src/blockchain_at_fintech/fi/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
      # Client key and cert for SSL handshake with Fabric CA
      client:
        key:
          #          path: ${GOPATH}/src/github.com/hyperledger/fabric-sdk-go/test/fixtures/fabricca/tls/certs/client/client_fabric_client-key.pem
          #path:  c:/Dropbox/devel/go/src/blockchain_at_fintech/fi/crypto-store/testfi1/msp/keystore/testfi1@Org1MSP.pem
          path:  c:/Dropbox/devel/go/src/blockchain_at_fintech/fi/crypto-store/{USERNAME}/msp/keystore/{USERNAME}@Org1MSP.pem
        cert:
          #          path: ${GOPATH}/src/github.com/hyperledger/fabric-sdk-go/test/fixtures/fabricca/tls/certs/client/client_fabric_client.pem
          #path:  c:/Dropbox/devel/go/src/blockchain_at_fintech/fi/crypto-store/testfi1/msp/signcerts/testfi1@Org1MSP-cert.pem
          path:  c:/Dropbox/devel/go/src/blockchain_at_fintech/fi/crypto-store/{USERNAME}/msp/signcerts/{USERNAME}@Org1MSP-cert.pem

    # Fabric-CA supports dynamic user enrollment via REST APIs. A "root" user, a.k.a registrar, is
    # needed to enroll and invoke new users.
    registrar:
      enrollId: admin2
    #  enrollSecret: eSJmwUOKmjAZ
    # [Optional] The optional name of the CA.
    #caName: ca.org1.example.com
    caName: ca-org1

  # EntityMatchers enable substitution of network hostnames with static configurations
  # so that properties can be mapped. Regex can be used for this purpose
  # UrlSubstitutionExp can be empty which means the same network hostname will be used
  # UrlSubstitutionExp can be given same as mapped peer url, so that mapped peer url can be used
  # UrlSubstitutionExp can have golang regex matchers like $1.local.example.$2:$3 for pattern
  # like peer0.org1.example.com:1234 which converts peer0.org1.example.com to peer0.org1.local.example.com:1234
  # EventUrlSubstitutionExp and sslTargetOverrideUrlSubstitutionExp follow in the same lines as
  # SubstitutionExp for the fields eventUrl and gprcOptions.ssl-target-name-override respectively
# In any case mappedHost's config will be used, so mapped host cannot be empty, if entityMatchers are used
#
# https://docs.google.com/document/d/17YwH4z2vf7B-85Z2Mr2YVH-LgqCu-Why-j6KMWGIId8/edit
entityMatchers:
  peer:
  - pattern: peer1.org1.example.com
    #urlSubstitutionExp: {PEER_URL}
    #eventUrlSubstitutionExp: {EVENT_URL}
    urlSubstitutionExp: 192.168.99.100:30110
    eventUrlSubstitutionExp: 192.168.99.100:30111
    sslTargetOverrideUrlSubstitutionExp: peer1.org1.example.com
    mappedHost: local.peer1.org1.example.com

  orderer:
  - pattern: orderer.example.com
    #urlSubstitutionExp: {ORDERER_URL}
    urlSubstitutionExp: 192.168.99.100:31010
    sslTargetOverrideUrlSubstitutionExp: orderer.example.com
    mappedHost: local.orderer.example.com

  certificateAuthority:
  - pattern: ca.org1.example.com
    #urlSubstitutionExp: {CA_URL}
    urlSubstitutionExp: http://192.168.99.100:7054
    mappedHost: local.ca.org1.example.com
